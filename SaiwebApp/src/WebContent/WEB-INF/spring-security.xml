<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" 
    xmlns:security="http://www.springframework.org/schema/security"
	xsi:schemaLocation="http://www.springframework.org/schema/beans 
	   		http://www.springframework.org/schema/beans/spring-beans-3.0.xsd
			http://www.springframework.org/schema/security 
			http://www.springframework.org/schema/security/spring-security-3.0.xsd">
	
	<!-- To allow standards-based @Secured annotation, enable secured-annotations
			See Spring Security 3.1 Reference 2.4 Method Security 
			- http://static.springsource.org/spring-security/site/docs/3.1.x/reference/ns-config.html#ns-protect-pointcut 
			- http://static.springsource.org/spring-security/site/docs/3.1.x/reference/appendix-namespace.html#d0e8651
			See Spring Security 3.1 Referecne 15.1.1 Common Built-In Expressions
			- http://static.springsource.org/spring-security/site/docs/3.1.x/reference/el-access.html -->
			
			
	<security:global-method-security secured-annotations="enabled" />
	
	<!-- This is where we configure Spring-Security  -->
	<security:http auto-config="true" use-expressions="true" access-denied-page="/denied.html" >
		<!-- security:anonymous enabled='false'/-->
		<!-- security:intercept-url pattern="/login.html" access="permitAll"/>
		<security:intercept-url pattern="/logout.html" access="permitAll"/>
		<security:intercept-url pattern="/denied.html" access="permitAll"/>
		<security:intercept-url pattern="/home.html" access="permitAll"/>		
		<security:intercept-url pattern="/modifyUser.html" access="hasRole('ROLE_USER')"/-->
		<security:form-login
				login-page="/login.html" 
				authentication-failure-url="/login/failure.html" 
				default-target-url="/home.html"/>
			
		<security:logout 
				invalidate-session="true" 
				logout-success-url="/logout/success.html" 
				logout-url="/logout"/>
	
	</security:http>
	
	<!-- Declare an authentication-manager to use a custom userDetailsService -->
	<security:authentication-manager>
	        <security:authentication-provider user-service-ref="userManagementService">
	        		<!-- security:password-encoder ref="passwordEncoder"/-->
	        </security:authentication-provider>
	</security:authentication-manager>
	

	 <!-- An in-memory list of users. No need to access an external database layer.
		    See Spring Security 3.1 Reference 5.2.1 In-Memory Authentication -->
	 <!-- john's password is admin, while jane;s password is user  -->
	 <!-- security:user-service id="userManagementService">
	    <security:user name="john" password="21232f297a57a5a743894a0e4a801fc3" authorities="ROLE_USER, ROLE_ADMIN" />
	    <security:user name="jane" password="ee11cbb19052e40b07aac0ca060c23ee" authorities="ROLE_USER" />
	  </security:user-service-->
	
</beans>
